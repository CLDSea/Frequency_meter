// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/12/2022 11:37:45"
                                                                                
// Verilog Test Bench template for design : TaskFrequencyMeter
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module TaskFrequencyMeter_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk_50M;
reg rst;
reg signal_in;
reg [7:0] sw;
// wires                                               
wire [31:0]  M;
wire [31:0]  N;
wire gate_out;
wire signal_out;

// assign statements (if any)                          
TaskFrequencyMeter i1 (
// port map - connection between master ports and signals/registers   
	.M(M),
	.N(N),
	.clk_50M(clk_50M),
	.gate_out(gate_out),
	.rst(rst),
	.signal_in(signal_in),
	.signal_out(signal_out),
	.sw(sw)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin  
rst = 1;
clk_50M = 0;
#10 rst = 0;
#10 rst = 1;
forever #10 clk_50M=~clk_50M;                        
                                                       
// --> end                                             
$display("Running testbench");                       
end       
initial
begin
sw = 8'b1000_0000;
#10_000_000 sw = 8'b0100_0000;
#10 rst = 0;
#10 rst = 1;
#10_000_000 sw = 8'b0010_0000;
#10 rst = 0;
#10 rst = 1;
#10_000_000 sw = 8'b0001_0000;
#10 rst = 0;
#10 rst = 1;
#10_000_000 sw = 8'b0000_1000;
#10 rst = 0;
#10 rst = 1;
#10_000_000 sw = 8'b0000_0100;
#10 rst = 0;
#10 rst = 1;
#10_000_000 sw = 8'b0000_0010;
#10 rst = 0;
#10 rst = 1;
#10_000_000 sw = 8'b0000_0001;
#10 rst = 0;
#10 rst = 1;
#10_000_000 sw = 8'b0000_0000;

end                                              
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

